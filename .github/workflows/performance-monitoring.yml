name: Performance Monitoring

on:
  schedule:
    - cron: '0 */6 * * *' # Run every 6 hours
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  lighthouse-performance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://jobifies.com
            https://jobifies.com/jobs
            https://jobifies.com/companies
            https://jobifies.com/dashboard
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Format Lighthouse Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('.lighthouseci/manifest.json', 'utf8'));
            
            let comment = '## üîç Lighthouse Performance Results\n\n';
            
            for (const result of results) {
              const { url, summary } = result;
              comment += `### ${url}\n`;
              comment += `- **Performance**: ${summary.performance * 100}%\n`;
              comment += `- **Accessibility**: ${summary.accessibility * 100}%\n`;
              comment += `- **Best Practices**: ${summary['best-practices'] * 100}%\n`;
              comment += `- **SEO**: ${summary.seo * 100}%\n\n`;
            }
            
            console.log(comment);

  load-testing:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run load tests
        run: |
          artillery run tests/performance/load-test.yml \
            --target https://api.jobifies.com \
            --output load-test-results.json

      - name: Generate load test report
        run: |
          artillery report load-test-results.json --output load-test-report.html

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: |
            load-test-results.json
            load-test-report.html

  api-performance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: API Performance Test
        uses: matt-ball/newman-action@master
        with:
          collection: tests/api/postman-collection.json
          environment: tests/api/production-environment.json
          reporters: htmlextra,cli
          iterationCount: 100

      - name: Upload API test results
        uses: actions/upload-artifact@v3
        with:
          name: api-performance-results
          path: newman/

  database-performance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Database Performance Monitoring
        run: |
          # Custom script to monitor database performance metrics
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_DB_SERVICE_ID }}/metrics" \
            | jq '.data[] | select(.name == "cpu_percent" or .name == "memory_percent" or .name == "connections")'

  uptime-monitoring:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check service uptime
        run: |
          # Check frontend
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://jobifies.com)
          if [ $FRONTEND_STATUS -ne 200 ]; then
            echo "Frontend is down! Status: $FRONTEND_STATUS"
            exit 1
          fi
          
          # Check backend
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.jobifies.com/health)
          if [ $BACKEND_STATUS -ne 200 ]; then
            echo "Backend is down! Status: $BACKEND_STATUS"
            exit 1
          fi
          
          echo "All services are up and running"

      - name: Notify on downtime
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          message: |
            üö® *Service Downtime Detected* 
            One or more services are currently unavailable.
            Please investigate immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}